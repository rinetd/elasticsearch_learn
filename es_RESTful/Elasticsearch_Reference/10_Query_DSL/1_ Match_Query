{
    "match" : {
        "message" : "this is a test"
    }
}


{
    "match" : {
        "message" : {
            "query" : "this is a test",
            "operator" : "and"
        }
    }
}

zero_terms_query. If the analyzer used removes all tokens in a query like a stop filter does,
the default behavior is to match no documents at all. In order to change that the zero_terms_query
 option can be used, which accepts none (default) and all which corresponds to a match_all query.


{
    "match" : {
        "message" : {
            "query" : "to be or not to be",
            "operator" : "and",
            "zero_terms_query": "all"
        }
    }
}


phraseedit

The match_phrase query analyzes the text and creates a phrase query out of the analyzed text. For example:

{
    "match_phrase" : {
        "message" : "this is a test"
    }
}
Since match_phrase is only a type of a match query, it can also be used in the following manner:

{
    "match" : {
        "message" : {
            "query" : "this is a test",
            "type" : "phrase"
        }
    }
}



The analyzer can be set to control which analyzer will perform the analysis process on the text.
It defaults to the field explicit mapping definition, or the default search analyzer, for example:

{
    "match_phrase" : {
        "message" : {
            "query" : "this is a test",
            "analyzer" : "my_analyzer"
        }
    }
}


match_phrase_prefixedit

The match_phrase_prefix is the same as match_phrase, except that it allows for prefix matches
on the last term in the text. For example:

{
    "match_phrase_prefix" : {
        "message" : "this is a test"
    }
}
Or:

{
    "match" : {
        "message" : {
            "query" : "this is a test",
            "type" : "phrase_prefix"
        }
    }
}

